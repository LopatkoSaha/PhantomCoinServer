import { createClient } from "redis";

class RedisDB{
    private redisClient;

    constructor () {
        this.redisClient = createClient();
        this.redisClient.on("error", (err: any) => console.error("Redis Client Error", err));
        this.startRedis();
    }

    private async startRedis() {
        await this.redisClient.connect();
        console.log("üöÄ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω");
    }
    
    // ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –º–∏–Ω—É—Ç)
    public async saveToken(token: string, userId: string) {
        await this.redisClient.set(`token:${token}`, userId, {
        EX: 600, // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (10 –º–∏–Ω—É—Ç)
        });
        console.log(`üîí –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    }
  
    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    public async getToken(token: string) {
        const userId = await this.redisClient.get(`token:${token}`);
        if (userId) {
        console.log(`‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        } else {
        console.log("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫");
        }
        return userId;
    }
  
    // ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    public async deleteToken(token: string) {
        await this.redisClient.del(`token:${token}`);
        console.log("üóëÔ∏è –¢–æ–∫–µ–Ω —É–¥–∞–ª—ë–Ω");
    }
}

export const RedisDb = new RedisDB();