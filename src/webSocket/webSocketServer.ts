import WebSocket, {WebSocketServer} from "ws";

export class WSServer {
    private wss: WebSocketServer;

    constructor (private path: string, port: number, private welcomeCb: (channel: string) => Promise<any>) {
      this.wss = new WebSocketServer({ port, path });
      this.wss.on("connection", (ws, req) => this.connection(ws, req));
      console.log(`üöÄ WebSocket —Å–µ—Ä–≤–µ—Ä ${this.path} –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://localhost:${port}`);
    }

    private async connection(ws: WebSocket, req: any) {
        const channel = req.url.split("?")[1]?.split("=")[1];
      
        ws.send(JSON.stringify(await this.welcomeCb(channel)));
        console.log(`üîó –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ ${this.path}`);
        ws.on("close", () => this.close(ws));
      }
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º
    public broadcast(message: string) {
      this.wss.clients.forEach((client) => {
        
        if (client.readyState === WebSocket.OPEN) {
          client.send(message);
        }
      });
    }

    public send(channel: string, message: string) { //–ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–µ—Å—Å–µ–¥–∂–∏ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç
      this.wss.clients.forEach((client) => {
        if (client.readyState === WebSocket.OPEN) {
          client.send(message);
        }
      });
    }
    
    private close(ws: WebSocket) {
      console.log(`‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç ${this.path}`);
    }
}
